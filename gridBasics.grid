void addToGrid(int x, int y, Item listNode* p_n){
	/*Set location of item p_n somewhere here*/
	/*Having trouble setting a nested struct with a pointer on the left-most side. Leads to segmentation fault*/
	Item listNode* iterator;
	p_n.x = x;
	p_n.y = y;
  if(GridData[x,y] == None)
  {
		GridData[x,y] = p_n;
		iterator = GridData[x,y];	
		iterator.next = None;
		return;
	}
	else
	{
		/*Go through list to run colocation first*/
		iterator = GridData[x,y];
	  while(iterator != None)
	  {
			if (iterator != p_n)
			{
				colocation(x, y, p_n, iterator);
			}
			iterator = iterator.next;
		}

	  if(GridData[x,y] == None)
	  {
			GridData[x,y] = p_n;
			iterator = GridData[x,y];	
			iterator.next = None;
			return;
		}

		iterator = GridData[x,y];
	  while(iterator.next != None)
	  {
			iterator = iterator.next;
		}
		iterator.next = p_n;
		iterator = iterator.next;
		iterator.next = None;

	}
	
}


void deleteFromGrid(int x, int y, string tag){

	Item listNode* iterator;
	Item listNode* next_iterator;
	iterator = GridData[x,y];
	next_iterator = iterator.next;

	if(iterator.nametag == tag){
		GridData[x,y] = None;
		iterator.next = None;
		iterator = None;
		return;
	}

	while(iterator.next != None ){
		if(next_iterator.nametag == tag){
			iterator.next = next_iterator.next;
			next_iterator.next = None;
			next_iterator = None;
			return;
		}
		next_iterator = next_iterator.next;
		iterator = iterator.next;
	}

	if(iterator.next == None){
		print("Not found on given coordinate");
		return;
	}
	
}

int printGrid(){
	int x;
	int y;
	int i;
	int k;
	int width;
	int tempLen;
	int flag;
	int max_width;
	int border_len;
	string printer;
	Item listNode* iterator;
	width = 0;
	max_width = 0;
	border_len = 0;
	
	for(x = 0; x < rows; x = x+1){
		for(y = 0; y < cols; y = y+1){
			iterator = GridData[x,y];
			width = 0;
			if(iterator!=None){
				width = width + getLen(iterator.nametag);
				iterator = iterator.next;
			}
			while(iterator != None ){
				width = width + 2;
				width = width + getLen(iterator.nametag);
				iterator = iterator.next;
			}
			if(width>max_width){
				max_width = width;
			}
		}
	}

	border_len = max_width * cols + (cols);

	for (i = 0; i < border_len; i=i+1)
	{
		print_sameline("_");
	}
	print_endline();
	
	/* printing column numbers*/

	for(i=0;i<cols;i=i+1){	 
		for(k=0; k < max_width/2; k=k+1){
			print_sameline("_");
		}
		print_int_sameline(i);
		for(k=0; k < max_width-(max_width/2); k=k+1){
			print_sameline("_");
		}
		
	}

	print_endline();

	for(x = 0; x < rows; x = x+1)
	{
		for(y = 0; y < cols; y = y+1)
		{
			tempLen = 0;
			print_sameline("|");
			iterator = GridData[x,y];
			if(iterator!=None){
				printer = iterator.nametag;
				tempLen = tempLen + getLen(printer);
				print_sameline(printer);
				iterator = iterator.next;
			}
			while(iterator !=None)
			{	
				print_sameline(", ");
				printer = iterator.nametag;
				tempLen = tempLen + getLen(printer);
				tempLen = tempLen +2;
				print_sameline(printer);
				iterator = iterator.next;
			}
			for(k=0;k<max_width-tempLen;k=k+1){
				print_sameline(" ");
			}
		}
		print_sameline("|");	
		print_int_sameline(x);
		print_endline();
	}

	for (i = 0; i < border_len; i=i+1)
	{
		print_sameline("-");
	}
	print_endline();
	return 0;
}

int moveOnGrid(int src_x, int src_y, int dst_x, int dst_y)
{
	Item listNode temp;
	Item listNode* p_n;
	int result;
	p_n = getHead(src_x, src_y);
	if (p_n != None)
	{
		result = triggerRule(src_x, src_y, dst_x, dst_y, p_n.typetag);
		if (result == 1)
		{
			deleteFromGrid(src_x, src_y, p_n.nametag);
			addToGrid(dst_x, dst_y, p_n);
		}
		else
		{
			currentPlayerIndex = currentPlayerIndex - 1;			
		}
	}
	else
	{
		print("No piece on cell");
		currentPlayerIndex = currentPlayerIndex - 1;
		return 0;
	}
	return result;
}

Item listNode* getHead(int x, int y){
	Item listNode* head;
	head = GridData[x,y];
	return head;

}

Item listNode* getListNodeFromItem(string displayString)
{
	Item listNode* iterator;
	int x;
	int y;
	for(x = 0; x < rows; x = x+1)
	{
		for(y = 0; y < cols; y = y+1)
		{
			iterator = GridData[x,y];
			while(iterator != None )
			{
				if (iterator.nametag == displayString)
				{
					return iterator;
				}
				iterator = iterator.next;
			}
		}
	}
	iterator = None;
	return iterator;
}

int checkBound(int x,int y){
	if(x > -1 && x <= rows && y>-1 && y <= cols){
		return 1;
	}
	else{
		return 0;
	}
}

/*Currently assumes only x is different (column-wise)*/

int traverse(int src_x, int src_y, int dst_x, int dst_y)
{
	int gx;
	int sx;
	int tx;
	int gy;
	int sy;
	int start_x;
	int start_y;
	int end_x;
	int end_y;
	Item listNode* iter;

	if(dst_y == src_y){
		if (src_x > dst_x){
			gx = src_x;
			sx = dst_x;
		}
		else{
			gx = dst_x;
			sx = src_x;
		}	

		for(tx = sx+1; tx < gx; tx = tx+1){
			iter = GridData[tx,src_y];
			if (iter != None){
				return 1;
			}
		}
		return 0;
	}
	
	if(src_x == dst_x){
		if (src_y > dst_y){
			gy = src_y;
			sy = dst_y;
		}
		else{
			gy = dst_y;
			sy = src_y;
		}		

		for(tx = sy+1; tx < gy; tx = tx+1){
			iter = GridData[src_x,tx];
			if (iter != None){
				return 1;
			}
		}
		return 0;
	}

	start_x = src_x;
	start_y = src_y;
	end_x = dst_x;
	end_y = dst_y;
	if(abs((dst_y - src_y)/(dst_x - src_x)) == 1){
		if((dst_x > src_x) && (dst_y > src_y)){
			for(tx = start_x + 1; tx < end_x; tx = tx+1){
				start_y = start_y + 1;
				iter = GridData[tx,start_y];
				if (iter != None){
					return 1;
				}
			}	
			return 0;

		}
		if((dst_x > src_x) && (dst_y < src_y)){
			for(tx = start_x + 1; tx < end_x; tx = tx+1){
				start_y = start_y - 1;
				iter = GridData[tx,start_y];
				if (iter != None){
					return 1;
				}
			}	
			return 0;
		}
		if((dst_x < src_x) && (dst_y < src_y)){
			for(tx = start_x - 1; tx > end_x; tx = tx-1){
				start_y = start_y - 1;
				iter = GridData[tx,start_y];
				if (iter != None){
					return 1;
				}
			}	
			return 0;
		}
		if((dst_x < src_x) && (dst_y > src_y)){
			for(tx = start_x - 1; tx > end_x; tx = tx - 1){
				start_y = start_y + 1;
				iter = GridData[tx,start_y];
				if (iter != None){
					return 1;
				}
			}	
			return 0;
		}

	}

	return 0;
}