void addToGrid(int x, int y, *Item listNode p_n){
	/*Set location of item p_n somewhere here*/
	/*Having trouble setting a nested struct with a pointer on the left-most side. Leads to segmentation fault*/
	*Item listNode iterator;
	p_n.x = x;
	p_n.y = y;
  if(GridNew[x][y] == None)
  {
		GridNew[x][y] = p_n;
		iterator = GridNew[x][y];	
		iterator.next = None;
		return;
	}
	else
	{
		/*Go through list to run colocation first*/
		iterator = GridNew[x][y];
	  while(iterator != None)
	  {
			if (iterator != p_n)
			{
				colocation(x, y, p_n, iterator);
			}
			iterator = iterator.next;
		}

	  if(GridNew[x][y] == None)
	  {
			GridNew[x][y] = p_n;
			iterator = GridNew[x][y];	
			iterator.next = None;
			return;
		}

		iterator = GridNew[x][y];
	  while(iterator.next != None)
	  {
			iterator = iterator.next;
		}
		iterator.next = p_n;
		iterator = iterator.next;
		iterator.next = None;

	}
	
}


void deleteFromGrid(int x, int y, string tag){

	*Item listNode iterator;
	*Item listNode next_iterator;
	iterator = GridNew[x][y];
	next_iterator = iterator.next;

	if(iterator.nametag == tag){
		GridNew[x][y] = None;
		iterator.next = None;
		iterator = None;
		return;
	}

	while(iterator.next != None ){
		if(next_iterator.nametag == tag){
			iterator.next = next_iterator.next;
			next_iterator.next = None;
			next_iterator = None;
			return;
		}
		next_iterator = next_iterator.next;
		iterator = iterator.next;
	}

	if(iterator.next == None){
		print("Not found on given coordinate");
		return;
	}
	
}

int printGrid(){
	int x;
	int y;
	int len;
	int flag;
	int max_len;
	string printer;
	*Item listNode iterator;
	len = 0;
	max_len = 0;
	
	for(x = 0; x < rows; x = x+1){
		for(y = 0; y < cols; y = y+1){
			iterator = GridNew[x][y];
	
			while(iterator != None ){
				iterator = iterator.next;
				len = len + 1 ;
			}
			if(max_len < len){
				max_len = len;
			}

		}

	}

	for(x = 0; x < rows; x = x+1)
	{
		for(y = 0; y < cols; y = y+1)
		{
			iterator = GridNew[x][y];	
			print_sameline("|");
			flag = 0;
			while(iterator !=None)
			{
				if (flag != 1)
				{
					flag = 1;
				}
				else
				{
					print_sameline(", ");
				}
				printer = iterator.nametag;
				print_sameline(printer);
				iterator = iterator.next;
			}
		}
		print_sameline("|");				
		print_endline();
	}
	print("----------------");
	return 0;
	
}

void moveOnGrid(int src_x, int src_y, int dst_x, int dst_y)
{
	Item listNode temp;
	*Item listNode p_n;
	int result;
	p_n = getHead(src_x, src_y);
	if (p_n != None)
	{
		result = triggerRule(src_x, src_y, dst_x, dst_y, p_n.typetag);
		if (result == 1)
		{
			deleteFromGrid(src_x, src_y, p_n.nametag);
			addToGrid(dst_x, dst_y, p_n);
		}
	}
	else
	{
		print("No piece on cell");
		currentPlayerIndex = currentPlayerIndex - 1;
	}
}

*Item listNode getHead(int x, int y){
	*Item listNode head;
	head = GridNew[x][y];
	return head;

}